//@version=6
//@description=Identify periods of lower volatility in bond futures (e.g., 10Y T-Note) using Bollinger Bandwidth or ATR; enter a breakout trade if the price moves significantly outside the compressed range, aiming to capture a volatility expansion.
strategy(title = "GovBond - Vol Con Breakout (Risk-Based)",
     shorttitle         = "Bond_VolCon_Risk",
     overlay            = true,
     initial_capital    = 200000,   // Adjust as needed
     default_qty_type   = strategy.fixed // We'll specify 'qty' ourselves
     )

// === USER INPUTS ===
// Bollinger Band settings
bbLength     = input.int(20,   title="Bollinger Period", minval=1)
bbMult       = input.float(2.0, title="Bollinger Multiplier", step=0.1)

// Minimum Bollinger Band Width threshold to detect “low volatility”
bbWidthThres = input.float(0.5, title="BB Width Threshold (absolute or relative)")

// ATR Stop-Loss settings
atrPeriod    = input.int(14, title="ATR Period", minval=1)
atrMult      = input.float(2.0, title="ATR Stop Multiple", step=0.1)

// === PRICE DATA FROM CURRENT CHART ===
bondClose = close  // Uses whichever bond (or other) symbol is on your chart

// === BOLLINGER BANDS CALCULATION ===
basis  = ta.sma(bondClose, bbLength)
dev    = bbMult * ta.stdev(bondClose, bbLength)
upper  = basis + dev
lower  = basis - dev

// === BOLLINGER BAND WIDTH ===
bbWidth = upper - lower

// === LOW VOLATILITY “SQUEEZE” CONDITION ===
squeezeCondition = bbWidth < bbWidthThres

// === BREAKOUT SIGNALS ===
// Long breakout if the close crosses above the upper band after a squeeze
// Short breakout if the close crosses below the lower band after a squeeze
longSignal  = squeezeCondition and bondClose > upper
shortSignal = squeezeCondition and bondClose < lower

// === ATR STOP-LOSS CALCULATION ===
atrValue     = ta.atr(atrPeriod)
stopDistance = atrMult * atrValue

// === STRATEGY EXIT: ATR-BASED STOP ===
if strategy.position_size > 0
    // If LONG, exit if price < (entryPrice - stopDistance)
    strategy.exit(id         = "Exit Long",
       from_entry = "Long Entry",
       stop       = strategy.position_avg_price - stopDistance)

if strategy.position_size < 0
    // If SHORT, exit if price > (entryPrice + stopDistance)
    strategy.exit(id         = "Exit Short",
       from_entry = "Short Entry",
       stop       = strategy.position_avg_price + stopDistance)

// === ENTRY LOGIC ===
// When a breakout occurs, close the opposing position and open a new one in the breakout direction.
if longSignal
    // 1) Close any Short
    strategy.close(id="Short Entry", comment="Close Short for Long Breakout")
    // 2) Enter Long
    strategy.entry(id="Long Entry", direction=strategy.long)

if shortSignal
    // 1) Close any Long
    strategy.close(id="Long Entry", comment="Close Long for Short Breakout")
    // 2) Enter Short
    strategy.entry(id="Short Entry", direction=strategy.short)

// === PLOT BOLLINGER BANDS AND SIGNALS ===
// Use named parameters consistently
plot(series=basis, title="BB Basis", color=color.new(color.gray, 0))
plot(series=upper, title="BB Upper", color=color.new(color.teal, 0))
plot(series=lower, title="BB Lower", color=color.new(color.orange, 0))

//plotshape(series    = longSignal, 
//     title     = "Long Signal",
//     style     = shape.triangleup, 
//     location  = location.belowbar,
//     color     = color.green, 
//     size      = size.tiny)

//plotshape(series    = shortSignal, 
//     title     = "Short Signal",
//     style     = shape.triangledown, 
//     location  = location.abovebar, 
//     color     = color.red, 
//     size      = size.tiny)

// === ALERTS (Optional) ===
if longSignal
    alert("Volatility Contraction Breakout (Long) triggered!", alert.freq_once_per_bar)

if shortSignal
    alert("Volatility Contraction Breakout (Short) triggered!", alert.freq_once_per_bar)
